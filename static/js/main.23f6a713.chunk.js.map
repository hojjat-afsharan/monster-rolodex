{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","console","log","monsters","map","SearchBox","placeholder","handleChanges","type","onChange","App","fakeMonsters","e","setState","searchField","target","value","state","fetch","then","response","json","users","catch","error","warn","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mTAEaA,G,YAAO,SAACC,GAEnB,OACE,sBAAKC,UAAU,iBAAf,UACE,qBACAA,UAAU,cACRC,IAAI,UACJC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BAEL,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,aCTXC,EAAW,SAACR,GAEvB,OADAS,QAAQC,IAAIV,GAEV,qBAAKC,UAAU,YAAf,SACGD,EAAMW,SAASC,KAAI,SAACR,GAAD,OAClB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCNdQ,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAYC,EAAd,EAAcA,cAAd,OAEjB,uBACId,UAAU,SACVe,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCkDPG,G,wDAlDb,aAAe,IAAD,8BACZ,gBAQFC,aAAe,CACb,CAAEd,GAAI,EAAGC,KAAM,gBACf,CAAED,GAAI,EAAGC,KAAM,UACf,CAAED,GAAI,EAAGC,KAAM,YAZH,EA0BdS,cAAgB,SAACK,GACf,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,QAAS,kBAAMf,QAAQC,IAAI,EAAKe,WAxBtE,EAAKA,MAAQ,CACXd,SAAU,GACVW,YAAa,IALH,E,gEAeO,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAW,EAAKT,SAAS,CAAEV,SAAUmB,OAC1CC,OAAM,SAACC,GACNvB,QAAQuB,MAAMA,GACdvB,QAAQwB,KAAK,2BACb,EAAKZ,SAAS,CAAEV,SAAU,EAAKQ,oB,+BAQ3B,IAAD,EAEyBe,KAAKT,MAA9Bd,EAFA,EAEAA,SAAUW,EAFV,EAEUA,YACXa,EAAmBxB,EAASyB,QAAO,SAAAhC,GAAO,OAAIA,EAAQE,KAAK+B,cAAcC,SAAShB,MAExF,OACE,sBAAKrB,UAAU,MAAf,UAEA,iDACE,cAAC,EAAD,CACEa,YAAY,kBACZC,cAAemB,KAAKnB,gBAGtB,cAAC,EAAD,CAAUJ,SAAUwB,W,GA7CVI,cCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBf,MAAK,YAAkD,IAA/CgB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.23f6a713.chunk.js","sourcesContent":["import \"./card.styles.css\";\r\n\r\nexport const Card = (props) => {\r\n  //console.log(props.monster);\r\n  return (\r\n    <div className=\"card-container\">\r\n      <img\r\n      className=\"monster-img\"\r\n        alt=\"monster\"\r\n        src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}\r\n      />\r\n      <h2>{props.monster.name}</h2>\r\n      <p>{props.monster.email}</p>\r\n    </div>\r\n  );\r\n};\r\n","import \"./card-list.styles.css\";\r\nimport {Card} from '../card/card.component'\r\n\r\nexport const CardList = (props) => {\r\n  console.log(props);\r\n  return (\r\n    <div className=\"card-list\">\r\n      {props.monsters.map((monster) => (\r\n        <Card key={monster.id} monster={monster}/>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import './search-box.styles.css'\r\n\r\nexport const SearchBox = ({placeholder,handleChanges}) => (\r\n\r\n        <input\r\n            className=\"search\"\r\n            type=\"search\"\r\n            placeholder={placeholder}\r\n            onChange={handleChanges}\r\n        />\r\n)","import { Component } from \"react\";\n\nimport { CardList } from \"./components/card-list/card-list.component\";\nimport {SearchBox} from './components/search-box/search-box.component';\n\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField: \"\",\n    };\n  }\n\n  fakeMonsters = [\n    { id: 1, name: \"frankenstein\" },\n    { id: 2, name: \"Zombie\" },\n    { id: 3, name: \"Dracula\" },\n  ];\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => response.json())\n      .then((users) => this.setState({ monsters: users }))\n      .catch((error) => {\n        console.error(error);\n        console.warn(\"Using fake monster data\");\n        this.setState({ monsters: this.fakeMonsters });\n      });\n  }\n\n  handleChanges = (e) => {\n    this.setState({ searchField: e.target.value }, () => console.log(this.state));\n  }\n\n  render() {\n\n    const {monsters, searchField} = this.state;\n    const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField));\n\n    return (\n      <div className=\"App\">\n        \n      <h1>Monster Roledex</h1>\n        <SearchBox\n          placeholder=\"search monsters\"\n          handleChanges={this.handleChanges}\n        />\n\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}